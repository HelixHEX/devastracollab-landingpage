{"version":3,"sources":["assets/demo.png","Pages/Welcome.js","utils/globalVar.js","utils/atom.js","utils/reorder.js","Components/Header.js","Pages/Freelancer/Signup.js","Pages/Freelancer/Signin.js","Components/TodoGrid.js","Pages/Freelancer/Project.js","Pages/Client/InviteSignup.js","Pages/Client/AcceptInviteSignedin.js","App.js","reportWebVitals.js","index.js"],"names":["Testimonial","text","pb","pt","pl","pr","bg","w","minH","h","fontSize","color","mt","fontWeight","Welcome","props","history","useHistory","handleSignup","push","justify","onClick","_hover","mr","alignSelf","rounded","flexDir","textAlign","className","options","max","p","src","demo","alt","rowGap","columnGap","templateRows","templateColumns","justifyContent","isRound","size","icon","mb","ml","baseURL","currentProjectAtom","atom","key","default","axios","defaults","withCredentials","fetchProject","selector","get","a","uuid","post","window","Clerk","user","publicMetadata","type","userId","id","projectuuid","response","data","project","projectAtom","dangerouslyAllowMutability","accountTypeAtom","projects","set","params","tasks","source","destination","current","formatedTasks","find","task","status","droppableId","next","target","index","reordered","list","startIndex","endIndex","result","Array","from","splice","removed","reorder","newArr","map","x","newProject","filter","newTasks","oldIndex","addedTask","updatedMiniTask","miniTask","completed","newTitle","title","Signup","afterSignUp","Signin","App","forceRefresh","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","colors","brandgray","50","100","200","900","brandpurple","brandred","brandgreen","brandblue","styles","global","body","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0aac0966.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/demo.d21cc0cd.png\";","import React from 'react';\nimport { useHistory } from 'react-router-dom'\nimport {\n  Button,\n  Center,\n  Text,\n  Flex,\n  Heading,\n  Box,\n  Grid,\n  GridItem,\n  IconButton,\n  Divider,\n  Image\n} from '@chakra-ui/react'\n\nimport { Layout, MessageSquare, Users } from 'react-feather'\n\nimport demo from '../assets/demo.png'\n\nimport Tilt from 'react-tilt'\n \n// import { useClerk } from \"@clerk/clerk-react\";\n\nconst Welcome = (props) => {\n  const history = useHistory()\n  const handleSignin = () => {\n    history.push('/signin')\n  }\n  const handleSignup = () => {\n    history.push('/signup')\n  }\n  return (\n    <>\n      {/* <Center textAlign='center' flexDir='column' h='100vh'>\n        <Text fontSize={50} color='white'> Welcome to AstraCollab</Text>\n        <Text fontSize={20} color='white'>Built for freelancers by a freelancer</Text>\n        <Flex mt={2} justifyContent='space-evenly' w={300}>\n          <Button _hover={{color:'brandpurple.100', bg: 'brandgray.900'}} color='brandgray.900' bg='brandpurple.100' onClick={() => handleSignin()}>Signin</Button>\n          <Button _hover={{color:'brandgray.900', bg: 'brandpurple.100'}} color='brandpurple.100' bg='brandgray.900' onClick={() => handleSignup()}>Signup as freelancer</Button>\n        </Flex>\n          <Button _hover={{ bg: 'gray.200', color: 'brandgray.900' }} mr={5} alignSelf='center' color='white' rounded={0} bg='brandpurple.100'>Sign Up</Button> \n        \n      </Center> */}\n      <Box w='100%' h={70} >\n        <Flex h='100%' justify='flex-end' >\n          <Button onClick={() => handleSignin()} _hover={{ bg: 'gray.200', color: 'brandgray.900' }} mr={[4, 10, 30, 40]} alignSelf='center' color='white' rounded={0} bg='brandpurple.100'>Sign In</Button>\n        </Flex>\n      </Box>\n      <Center mt={100} flexDir='column'>\n        <Heading pl={5} pr={5} textAlign='center' color='white' flexDir='column' fontSize={45} >Project management for freelancers</Heading>\n        <Text mt={5} textAlign='center' w={['95%', '50%']} color='gray.500' fontSize={25} >Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</Text>\n        <Button onClick={() => handleSignup()} mt={5} _hover={{ bg: 'gray.200', color: 'brandgray.900' }} color='white' rounded={0} bg='brandpurple.100'>Get Started</Button>\n        <Tilt className=\"Tilt\" options={{ max: 10 }}>\n          <Box mt={10} rounded={10} w={[300, 400, 500, 600, 800]} h={[300, 300, 400, 400, 500]} bg=\"gray.900\" p={5}>\n            <Image\n              h='100%'\n              w='100%'\n              src={demo}\n              alt='App preview'\n            />\n          </Box>\n        </Tilt>\n        <Grid pl={[50, 50, 150]} pr={[50, 50, 150]} mt={20} rowGap={20} columnGap={10} templateRows=\"repeat(1, 1fr)\" templateColumns={[\"repeat(1, 1fr)\", \"repeat(2, 1fr)\", \"repeat(3, 1fr)\"]}>\n          <GridItem>\n            <Flex h='100%' w='100%' justifyContent='center' flexDir='column'>\n              <Flex h='100%' w='100%' flexDir='column'>\n                <IconButton\n                  alignSelf='center'\n                  bg='brandpurple.100'\n                  color='white'\n                  isRound={true}\n                  w={65}\n                  h={65}\n                  size='lg'\n                  icon={<Layout />}\n                />\n                <Text mt={2} textAlign='center' color='white' fontWeight='700' fontSize={30}>Simple Design</Text>\n                <Text mt={2} textAlign='center' color='gray.500' fontSize={20} >Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat.</Text>\n              </Flex>\n            </Flex>\n          </GridItem>\n          <GridItem>\n            <Flex h='100%' w='100%' flexDir='column'>\n              <IconButton\n                alignSelf='center'\n                bg='brandpurple.100'\n                color='white'\n                isRound={true}\n                w={65}\n                h={65}\n                size='lg'\n                icon={<MessageSquare />}\n              />\n              <Text mt={2} textAlign='center' color='white' fontWeight='700' fontSize={30}>Real-Time Chat</Text>\n              <Text mt={2} textAlign='center' color='gray.500' fontSize={20} >Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat.</Text>\n            </Flex>\n          </GridItem>\n          <GridItem>\n            <Flex h='100%' w='100%' flexDir='column'>\n              <IconButton\n                alignSelf='center'\n                bg='brandpurple.100'\n                color='white'\n                isRound={true}\n                w={65}\n                h={65}\n                size='lg'\n                icon={<Users />}\n              />\n              <Text mt={2} textAlign='center' color='white' fontWeight='700' fontSize={30}>Collaboration</Text>\n              <Text mt={2} textAlign='center' color='gray.500' fontSize={20} >Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat.</Text>\n            </Flex>\n          </GridItem>\n        </Grid>\n        {/* <Divider w='80%' mt={20} /> */}\n        <Heading mt={20} color='white'>Workflow that just works</Heading>\n        <Text w={['95%', '90%', '40%']} mt={2} textAlign='center' color='gray.500' fontSize={20} >Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum — semper quis lectus nulla at volutpat diam ut venenatis.</Text>\n        <Divider w='80%' mt={10} />\n        <Heading mt={20} color='white'>Customer testimonials</Heading>\n        <Flex justifyContent='center' w='100%' h='100%' pl={10} pr={10}>\n          <Grid mb={20} mt={20} rowGap={20} columnGap={10} templateRows=\"repeat(1, 1fr)\" templateColumns={[\"repeat(1, 1fr)\", \"repeat(1, 1fr)\", \"repeat(2, 1fr)\", \"repeat(2, 1fr)\", \"repeat(3, 1fr)\"]}>\n            <GridItem>\n              <Testimonial text='— Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum cillum dolore eu fugiat.' />\n            </GridItem>\n            <GridItem>\n              <Testimonial text='— Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum cillum dolore eu fugiat.' />\n            </GridItem>\n            <GridItem>\n              <Testimonial text='— Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum cillum dolore eu fugiat.' />\n            </GridItem>\n          </Grid>\n        </Flex>\n        <Box mb={30} pl={[5, 5, 5, 5, 150]} pr={[5, 5, 5, 5, 150]} w='100%' h={120}>\n          <Flex bg='brandpurple.100' w='100%' h='100%' >\n            <Center flexDir={['column', 'row']} h='auto' w='100%' >\n              <Text textAlign='center' fontWeight='700' fontSize={[20, 30, 30, 30]} color='white'>Ready to get started?</Text>\n              <Button onClick={() => handleSignup()} _hover={{ bg: 'gray.200', color: 'brandgray.900' }} bg='brandgray.900' color='white' rounded={0} ml={5}>Sign Up</Button>\n            </Center>\n          </Flex>\n        </Box>\n      </Center>\n    </>\n  )\n}\n\nconst Testimonial = ({ text }) => {\n  return (\n    <>\n      <Box pb={5} pt={10} pl={10} pr={10} bg='brandgray.900' w={[290, 350]} minH={400} h='auto'>\n        <Text fontSize={20} color='gray.500'>{text}</Text>\n        <Divider mt={5} />\n        <Text mt={5} color='white' fontWeight='600'>Elias Wambugu</Text>\n      </Box>\n    </>\n  )\n}\n\nexport default Welcome","// export const baseURL = 'http://192.168.1.219userId/api/v1/freelancer'\n\nexport const baseURL = !process.env.NODE_ENV || process.env.NODE_ENV === 'development' ? `http://192.168.1.219:5000/api/v1/` : 'https://www.astracollab.app/api/v1/'\nexport const frontendApi = !process.env.NODE_ENV || process.env.NODE_ENV === 'development' ? 'clerk.u656v.yqagd.lcl.dev' : 'clerk.astracollab.app'","import axios from 'axios'\nimport { selector, atom } from \"recoil\";\nimport { reorder } from './reorder';\nimport { baseURL } from './globalVar'\n// const user =  window.Clerk.user\n\nexport const currentProjectAtom = atom({\n  key: 'currentProject',\n  default: ''\n});\n\naxios.defaults.withCredentials = true\nexport const fetchProject = selector({\n  key: 'fetchProjectSelector',\n  get: async ({ get }) => {\n    try {\n      const uuid = get(currentProjectAtom)\n      if (uuid !== '') {\n        const response = await axios.post(baseURL + window.Clerk.user.publicMetadata.type + '/project', {\n          userId: window.Clerk.user.id,\n          projectuuid: uuid\n        })\n        const data = await response.data\n        return data.project\n      }\n    } catch (error) {\n      throw error\n    }\n  }\n})\n\nexport const projectAtom = atom({\n  key: 'projectAtom',\n  default: fetchProject,\n  dangerouslyAllowMutability: true\n})\n\n//old\n//#region \n// export const fetchProjects = selector({\n//   key: 'fetchProjectsSelector',\n//   get: async ({ get }) => {\n//     try {\n//       const response = await axios.post(baseURL + '/projects', {\n//         userId: window.Clerk.user.id\n//       })\n//       const data = await response.data\n\n//       let projects = data.projects.map(project => {\n//         let done = 0;\n//         let notcomplete = 0;\n//         let tasks = project.tasks.tasks\n//         if (tasks) {\n//           tasks.forEach((task, index) => {\n//             if (task.status === 'done') {\n//               done += 1;\n//             } else {\n//               notcomplete += 1\n//             }\n//           })\n//         }\n//         let progress = Math.floor(done / (done + notcomplete) * 100)\n//         if (!progress) {\n//           progress = 0\n//         }\n//         return {\n//           ...project,\n//           progress\n//         }\n//       })\n//       return projects\n//     } catch (error) {\n//       throw error\n//     }\n//   }\n// })\n//#endregion\n\n//new\nexport const fetchProjects = selector({\n  key: 'fetchProjectsSelector',\n  get: async ({ get }) => {\n    try {\n      const response = await axios.post(baseURL + window.Clerk.user.publicMetadata.type + '/projects', {\n        userId: window.Clerk.user.id\n      })\n      const data = await response.data\n\n      let projects = data.projects\n      return projects\n    } catch (error) {\n      throw error\n    }\n  }\n})\n\n\nexport const tempFahrenheit = atom({\n  key: 'tempFahrenheit',\n  default: 32,\n});\n\nexport const reorderTask = selector({\n  key: 'reorderTaskSelector',\n  get: ({ get }) => get(projectAtom),\n  set: ({ set, get }, params) => {\n    let { project, tasks, source, destination } = params\n    let current = project.formatedTasks.find(task => task.status === source.droppableId)\n    let next = project.formatedTasks.find(task => task.status === destination.droppableId)\n    const target = current.tasks[source.index]\n\n    if (source.droppableId === destination.droppableId) {\n      const reordered = reorder(current.tasks, source.index, destination.index);\n      const newArr = tasks.map(x => (x.status === current.status ? { ...x, tasks: reordered } : x));\n      const newProject = {\n        ...project,\n        formatedTasks: newArr\n      }\n      set(projectAtom, newProject)\n    } else {\n      current = {\n        ...current,\n        tasks: current.tasks.filter((task, index) => index !== source.index)\n      }\n      next = {\n        ...next,\n        tasks: [\n          ...next.tasks,\n          target\n        ]\n      }\n      const newTasks = tasks.map(task => {\n        if (current.status === task.status) {\n          return {\n            ...task,\n            tasks: current.tasks\n          }\n        } else if (next.status === task.status) {\n          return {\n            ...task,\n            tasks: next.tasks\n          }\n        }\n\n        return task\n      })\n      const newProject = {\n        ...project,\n        formatedTasks: newTasks\n      }\n      set(projectAtom, newProject)\n\n    }\n  }\n});\n\nexport const deleteTaskSelector = selector({\n  key: 'deleteTaskSelector',\n  get: ({get}) => get(projectAtom),\n  set: ({set, get}, params) => {\n    const {index} = params\n    let project = get(projectAtom)\n    let tasks = project.tasks \n    let newProject = {\n      ...project,\n      tasks: tasks.filter((task, oldIndex) => oldIndex !== index)\n    }\n    set(projectAtom, newProject)\n  }\n})\n\nexport const updateTasksSelector = selector({\n  key: 'updateTasksSelector',\n  get: ({ get }) => get(projectAtom),\n  set: ({ set, get }, params) => {\n    const { addedTask } = params\n    let project = get(projectAtom)\n    let tasks = project.tasks\n    let newProject = {\n      ...project,\n      tasks: [...tasks, addedTask]\n    }\n    set(projectAtom, newProject)\n  }\n})\n\nexport const updateMiniTaskSelector = selector({\n  key: 'updateMiniTaskSelector',\n  get: ({ get }) => get(projectAtom),\n  set: ({ set, get }, params) => {\n    const { addedTask } = params\n\n    let project = get(projectAtom)\n    let tasks = project.tasks.map((task) => {\n      if (task.uuid === addedTask.uuid) {\n        return {\n          ...task,\n          tasks: addedTask.tasks\n        }\n      }\n      return task\n    })\n    let newProject = {\n      ...project,\n      tasks\n    }\n    set(projectAtom, newProject)\n  }\n})\n\nexport const addMiniTaskStatusSelector = selector({\n  key: 'addMiniTaskStatusSelector',\n  get: ({ get }) => get(projectAtom),\n  set: ({ set, get }, params) => {\n    const { updatedMiniTask } = params\n    let project = get(projectAtom)\n\n    let tasks = project.tasks.map((task) => {\n      if (task.uuid === updatedMiniTask.uuid) {\n        return {\n          ...task,\n          tasks: task.tasks.map((miniTask, index) => {\n            if (index === updatedMiniTask.index) {\n              return {\n                ...miniTask,\n                completed: updatedMiniTask.miniTask.completed\n              }\n            }\n            return miniTask\n          })\n        }\n      }\n      return task\n    })\n    let newProject = {\n      ...project,\n      tasks\n    }\n    set(projectAtom, newProject)\n  }\n})\n\nexport const deleteMiniTaskSelector = selector({\n  key: 'deleteMiniTaskSelector',\n  get: ({ get }) => get(projectAtom),\n  set: ({ set, get }, params) => {\n    const { uuid, index } = params\n    let project = get(projectAtom)\n\n    let tasks = project.tasks.map((task) => {\n      if (task.uuid === uuid) {\n        return {\n          ...task,\n          tasks: task.tasks.filter((x, oldIndex) => oldIndex !== index)\n        }\n      }\n      return task\n    })\n\n    let newProject = {\n      ...project,\n      tasks\n    }\n    set(projectAtom, newProject)\n  }\n})\n\nexport const accountTypeAtom = atom({\n  key: 'accountTypeAtom',\n  default: ''\n})\n\nexport const accountTypeSelector = selector({\n  key: 'accountTypeSelector',\n  get: ({get}) => get(accountTypeAtom),\n  set: ({set}, params) => {\n    set(accountTypeAtom, params)\n  }\n})\n\nexport const updateTaskTitleSelector = selector({\n  key: 'updateTaskTitleSelector',\n  get: ({get}) => get(projectAtom),\n  set: ({set, get}, params) => {\n    const {index, newTitle} = params \n    const project = get(projectAtom)\n    const tasks = project.tasks.map((task, oldIndex) => {\n      if (oldIndex === index) {\n        return {\n          ...task,\n          title: newTitle\n        }\n      }\n      return task\n    })\n    const newProject = {\n      ...project,\n      tasks\n    }\n    set(projectAtom, newProject)\n  }\n})\n","// a little function to help us with reordering the result\nexport const reorder = (\n  list,\n  startIndex,\n  endIndex\n) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n","import React, { useState } from 'react'\nimport { UserButton, useUser } from \"@clerk/clerk-react\";\n\nimport {\n  Button,\n  Flex,\n  Text,\n  Icon,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n  Input,\n  FormLabel,\n  useToast,\n  IconButton,\n  Drawer,\n  DrawerBody,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  Box\n} from '@chakra-ui/react'\n\nimport { Plus, Menu } from 'react-feather';\n\nimport axios from 'axios'\n\n\nimport { currentProjectAtom, fetchProjects } from '../utils/atom'\nimport { useRecoilState, useRecoilValue } from 'recoil'\n\nimport { baseURL } from '../utils/globalVar'\n\naxios.defaults.withCredentials = true\n\nconst Header = (props) => {\n  const user = useUser()\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const toast = useToast()\n  const [project, setProject] = useState({\n    name: ''\n  })\n  const handleChange = (e) => {\n    setProject({\n      ...project,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  const handleSubmit = async () => {\n    if (project.name !== '') {\n      try {\n        await axios.post(baseURL + window.Clerk.user.publicMetadata.type + '/createproject', {\n          name: project.name,\n          userId: user.id\n        }).then(res => {\n          if (res.data.success) {\n            window.location.replace('/')\n          } else {\n            toast({\n              title: 'Uh Oh :(',\n              description: res.data.error,\n              status: 'error',\n              duration: 3000,\n              isClosable: true,\n            })\n          }\n        })\n      } catch (e) {\n        toast({\n          title: 'Uh Oh :(',\n          description: 'An error has occurred',\n          status: 'error',\n          duration: 3000,\n          isClosable: true,\n        })\n      }\n    }\n  }\n  return (\n    <>\n      {/* <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent bg='brandpurple.100'>\n          <ModalHeader color='brandgray.100'>New Project</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Flex flexDir='column'>\n              <FormLabel>Name</FormLabel>\n              <Input mt={-3} variant='flushed' name='name' onChange={handleChange} value={project.name} />\n            </Flex>\n          </ModalBody>\n          <ModalFooter>\n            <Button color='brandgray.100' variant=\"ghost\" mr={3} onClick={onClose}>\n              close\n            </Button>\n            <Button onClick={handleSubmit} _hover={{ color: 'brandgray.100', bg: 'gray.200' }} color='white' bg=\"brandgray.900\">Create Project</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal> */}\n      <Flex justifyContent='flex-end' mr='10%' mt='2%'>\n        {/* {user.publicMetadata.type === 'freelancer'\n          ? <>\n            <Button onClick={onOpen} _hover={{ bg: 'brandpurple.100', color: 'white' }} bg='brandgray.200' borderWidth={2} color='white' borderColor='brandpurple.100'>\n              New Project\n              <Icon ml={2} as={Plus} />\n            </Button>\n          </>\n          : null} */}\n\n        {/* <Flex ml={2} align='center'>\n          <Text wordBreak='break-all' color='brandgray.50'>{user.firstName}</Text>\n        </Flex> */}\n        <Flex align='center' ml={3} display={['flex', 'flex', 'flex', 'none', 'none']}>\n          <React.Suspense fallback={null}>\n            <MobileMenu props={props} />\n          </React.Suspense>\n        </Flex>\n      </Flex>\n    </>\n  )\n}\n\nconst MobileMenu = ({ props }) => {\n  const projects = useRecoilValue(fetchProjects);\n  const user = useUser()\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  // eslint-disable-next-line\n  const [currentProject, setCurrentProject] = useRecoilState(currentProjectAtom)\n  const handleNav = (link) => {\n    if (link.includes(`${user.publicMetadata.type}/project`)) {\n      if (currentProject !== '') {\n        window.location.href = `${link}${currentProject}`\n      } else if (projects.length === 1) {\n        window.location.href = `${link}/${projects[0].uuid}`\n      } else {\n        window.location.href = `${link}/default`\n      }\n    } else {\n      window.location.href = `${link}`\n    }\n\n  }\n  return (\n    <>\n      <NewProject />\n      <Flex mr={5} align='center'>\n        <UserButton />\n      </Flex>\n      <IconButton bg='none' color='white' aria-label=\"Mobile Menu\" icon={<Menu onClick={onOpen} />} />\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        onClose={onClose}\n        size='full'\n      >\n        <DrawerOverlay>\n          <DrawerContent bg='brandpurple.100'>\n            <DrawerCloseButton />\n            <DrawerHeader></DrawerHeader>\n\n            <DrawerBody>\n              <Text onClick={() => handleNav(`/${user.publicMetadata.type}`)} textAlign='center' color={props.dashActive ? 'brandgray.900' : 'white'} fontSize={30}>Dashboard</Text>\n              <Text onClick={() => handleNav(`/${user.publicMetadata.type}/project`)} textAlign='center' color={props.projectActive ? 'brandgray.900' : 'white'} fontSize={30}>Activity</Text>\n              <Text onClick={() => handleNav(`/${user.publicMetadata.type}/chat/default`)} textAlign='center' color={props.projectActive ? 'brandgray.900' : 'white'} fontSize={30}>Chat</Text>\n            </DrawerBody>\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </>\n  )\n}\n\nconst NewProject = () => {\n  const user = useUser()\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const toast = useToast()\n  const [project, setProject] = useState({\n    name: ''\n  })\n  const handleChange = (e) => {\n    setProject({\n      ...project,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  const handleSubmit = async () => {\n    if (project.name !== '') {\n      try {\n        await axios.post(baseURL + window.Clerk.user.publicMetadata.type + '/createproject', {\n          name: project.name,\n          userId: user.id\n        }).then(res => {\n          if (res.data.success) {\n            window.location.replace('/')\n          } else {\n            toast({\n              title: 'Uh Oh :(',\n              description: res.data.error,\n              status: 'error',\n              duration: 3000,\n              isClosable: true,\n            })\n          }\n        })\n      } catch (e) {\n        toast({\n          title: 'Uh Oh :(',\n          description: 'An error has occurred',\n          status: 'error',\n          duration: 3000,\n          isClosable: true,\n        })\n      }\n    }\n  }\n  return (\n    <>\n      <Button onClick={onOpen} _hover={{ bg: 'brandpurple.100', color: 'white' }} bg='brandgray.200' borderWidth={2} color='white' borderColor='brandpurple.100' mr={5}>\n        New Project\n      </Button>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay bg='whiteAlpha.300' />\n        <ModalContent color='white' bg='brandgray.900'>\n          <ModalHeader >New Project</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Flex flexDir='column'>\n              {/* <FormLabel>Name</FormLabel> */}\n              <Input placeholder='Enter Name' mt={-3} variant='flushed' name='name' onChange={handleChange} value={project.name} />\n            </Flex>\n          </ModalBody>\n          <ModalFooter>\n            <Button color='brandgray.900' bg='brandred.100' mr={3} onClick={onClose}>\n              close\n            </Button>\n            <Button onClick={handleSubmit} _hover={{ color: 'brandgray.100', bg: 'gray.200' }} color='brandgray.900' bg=\"brandpurple.100\">Create Project</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n\nexport default Header","import React from 'react'\nimport { SignUp } from \"@clerk/clerk-react\";\n// import { useHistory } from 'react-router-dom'\n// import {} from '@chakra-ui/react'\n\n\nconst Signup = () => {\n  return (\n    <>\n      <SignUp afterSignUp='/freelancer/signup' />\n    </>\n  )\n}\n\nexport default Signup","import React from 'react'\nimport { SignIn } from \"@clerk/clerk-react\";\n\nconst Signin = () => {\n  return (\n    <>\n      <SignIn />\n    </>\n  )\n}\n\nexport default Signin\n\n","import '../DatePicker.css'\n\nimport React, { useState } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { deleteMiniTaskSelector, projectAtom, updateMiniTaskSelector, addMiniTaskStatusSelector, deleteTaskSelector, updateTaskTitleSelector } from \"../utils/atom\";\n\nimport {\n  Grid,\n  Box,\n  Text,\n  // Center,\n  useDisclosure,\n  // Collapse,\n  Flex,\n  useToast,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  Input,\n  Checkbox,\n  IconButton,\n  Center,\n  Tooltip\n  // Editable,\n  // EditableInput,\n  // EditablePreview,\n  // useEditableControls,\n  // ButtonGroup,\n} from '@chakra-ui/react'\n\n\nimport {\n  // CheckIcon, \n  // CloseIcon, \n  // EditIcon, \n  // ChevronDownIcon, \n  // ChevronUpIcon, \n  DeleteIcon,\n  CalendarIcon,\n  CloseIcon\n} from '@chakra-ui/icons'\n\nimport {\n  Trash2\n} from 'react-feather'\n\nimport { baseURL } from \"../utils/globalVar\";\nimport axios from \"axios\";\nimport { useUser } from \"@clerk/clerk-react\";\n\nimport DatePicker from 'react-date-picker';\n\nimport Moment from 'react-moment'\n\naxios.defaults.withCredentials = true\n\nconst TodoGrid = () => {\n  const project = useRecoilValue(projectAtom)\n  return (\n    <>\n      {/* {project\n        ? <> */}\n      <Text textAlign='center' color='white' fontSize={40} fontWeight='700'>{project.name}</Text>\n      <Flex mt={5} display={['flex', 'flex', 'flex', 'flex', 'flex']}>\n        <Desktop project={project} />\n      </Flex>\n      <Flex mt={5} display={['flex', 'flex', 'none', 'none', 'none']}>\n        {/* <Mobile /> */}\n      </Flex>\n      {/* </> : null} */}\n    </>\n\n  );\n};\n\nconst Desktop = ({ project }) => {\n  // eslint-disable-next-line\n  let tasks = Array.from(project.tasks)\n  // tasks = tasks.sort((a, b) => a.createdAt - b.createdAt)\n  return (\n    <>\n      <Grid h='auto' rowGap={10} columnGap={[20, 20, 20, 12, 20]} templateColumns={[\"repeat(1, 1fr)\", \"repeat(2, 1fr)\", \"repeat(3, 1fr)\", \"repeat(4, 1fr)\", \"repeat(4, 1fr)\"]} >\n        {tasks.map((task, index) => (\n          <Task key={index} index={index} task={task} />\n        ))}\n      </Grid>\n\n    </>\n  )\n}\n\nconst Task = ({ task, index }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const [newTask, setNewTask] = useState('')\n  const toast = useToast()\n  const user = useUser()\n  // eslint-disable-next-line\n  const [addMiniTask, setAddMiniTask] = useRecoilState(updateMiniTaskSelector)\n  // eslint-disable-next-line\n  const [updateMinitTask, setUpdateMiniTask] = useRecoilState(addMiniTaskStatusSelector)\n  // eslint-disable-next-line\n  const [deleteMinitTask, setDeleteMiniTask] = useRecoilState(deleteMiniTaskSelector)\n  // eslint-disable-next-line\n  const [deleteTask, setDeleteTask] = useRecoilState(deleteTaskSelector)\n  // eslint-disable-next-line\n  const [updateTaskTitle, setUpdateTaskTitle] = useRecoilState(updateTaskTitleSelector)\n\n  const [newTitle, setNewTitle] = useState('')\n\n  const [deadlineDate, setDeadlineDate] = useState(task.deadline !== null ? new Date(task.deadline) : '');\n\n  const handleAddMiniTask = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.post(baseURL + user.publicMetadata.type + '/addminitask', {\n        userId: user.id,\n        taskuuid: task.uuid,\n        title: newTask,\n        completed: false\n      }).then(res => {\n        if (res.data.success) {\n          const addedTask = res.data.task\n          setNewTask('')\n          setAddMiniTask({ addedTask })\n        } else {\n          toast({\n            title: 'Uh Oh :(',\n            description: res.data.error,\n            status: 'error',\n            duration: 3000,\n            isClosable: true,\n          })\n        }\n      })\n    } catch (e) {\n      toast({\n        title: 'Uh Oh :(',\n        description: 'An error has occurred',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      })\n    }\n    // alert(task.completed)\n  }\n\n  const handleMiniTaskUpdate = async (index) => {\n    try {\n      await axios.post(baseURL + user.publicMetadata.type + '/updateminitask', {\n        taskuuid: task.uuid,\n        userId: user.id,\n        index,\n        completed: !task.tasks[index].completed\n      }).then(res => {\n        if (res.data.success) {\n          // setUpdateMiniTas\n          // alert(res.data.success)\n          const updatedMiniTask = {\n            uuid: task.uuid,\n            miniTask: res.data.miniTask,\n            index\n          }\n          setUpdateMiniTask({ updatedMiniTask })\n        } else {\n          toast({\n            title: 'Uh Oh :(',\n            description: res.data.error,\n            status: 'error',\n            duration: 3000,\n            isClosable: true,\n          })\n        }\n      })\n    } catch (e) {\n      toast({\n        title: 'Uh Oh :(',\n        description: 'An error has occurred',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      })\n    }\n  }\n\n  const handleDeleteTask = async (uuid) => {\n    try {\n      await axios.post(baseURL + user.publicMetadata.type + '/deletetask', {\n        userId: user.id,\n        taskuuid: uuid,\n      }).then(res => {\n        if (res.data.success) {\n          onClose()\n          setDeleteTask({ index })\n        } else {\n          toast({\n            title: 'Uh Oh :(',\n            description: res.data.error,\n            status: 'error',\n            duration: 3000,\n            isClosable: true,\n          })\n        }\n      })\n    } catch (e) {\n      toast({\n        title: 'Uh Oh :(',\n        description: 'An error has occurred',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      })\n    }\n  }\n\n  const hanldeDeleteMiniTask = async (index) => {\n    try {\n      await axios.post(baseURL + user.publicMetadata.type + '/deleteminitask', {\n        taskuuid: task.uuid,\n        userId: user.id,\n        index,\n      }).then(res => {\n        if (res.data.success) {\n          const params = {\n            uuid: task.uuid,\n            index: res.data.index\n          }\n          setDeleteMiniTask(params)\n        } else {\n          toast({\n            title: 'Uh Oh :(',\n            description: res.data.error,\n            status: 'error',\n            duration: 3000,\n            isClosable: true,\n          })\n        }\n      })\n    } catch (e) {\n      toast({\n        title: 'Uh Oh :(',\n        description: 'An error has occurred',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      })\n    }\n  }\n\n  const handleUpdateTitle = async (e) => {\n    e.preventDefault()\n    if (newTitle !== '' && task.title !== newTitle) {\n      try {\n        await axios.post(baseURL + user.publicMetadata.type + '/updatetasktitle', {\n          taskuuid: task.uuid,\n          userId: user.id,\n          newtitle: newTitle\n        }).then(res => {\n          if (res.data.success) {\n            setNewTitle('')\n            const params = { index, newTitle }\n            setUpdateTaskTitle(params)\n            toast({\n              description: 'Title updated',\n              status: 'success',\n              duration: 3000,\n              isClosable: true,\n            })\n          } else {\n            setNewTitle('')\n            toast({\n              title: 'Uh Oh :(',\n              description: res.data.error,\n              status: 'error',\n              duration: 3000,\n              isClosable: true,\n            })\n          }\n        })\n      } catch (e) {\n        setNewTitle('')\n        toast({\n          title: 'Uh Oh :(',\n          description: 'An error has occurred',\n          status: 'error',\n          duration: 3000,\n          isClosable: true,\n        })\n      }\n    }\n  }\n\n  // const EditableControls = () => {\n  //   const {\n  //     isEditing,\n  //     getSubmitButtonProps,\n  //     getCancelButtonProps,\n  //     getEditButtonProps,\n  //   } = useEditableControls()\n\n  //   const handleTitleChange = async (index) => {\n  //     try {\n  //       await axios.post(baseURL + '/deleteminitask', {\n  //         taskuuid: task.uuid,\n  //         userId: user.id,\n  //         index,\n  //       }).then(res => {\n  //         if (res.data.success) {\n  //          alert(res.data.success)\n  //         } else {\n  //           toast({\n  //             title: 'Uh Oh :(',\n  //             description: res.data.error,\n  //             status: 'error',\n  //             duration: 3000,\n  //             isClosable: true,\n  //           })\n  //         }\n  //       })\n  //     } catch (e) {\n  //       toast({\n  //         title: 'Uh Oh :(',\n  //         description: 'An error has occurred',\n  //         status: 'error',\n  //         duration: 3000,\n  //         isClosable: true,\n  //       })\n  //     }\n  //   }\n\n  //   return isEditing ? (\n  //     <ButtonGroup size=\"sm\">\n  //       <IconButton onClick={handleTitleChange} bg='brandgreen.100' icon={<CheckIcon />} {...getSubmitButtonProps()} />\n  //       <IconButton bg='brandred.100' icon={<CloseIcon />} {...getCancelButtonProps()} />\n  //     </ButtonGroup>\n  //   ) : (\n  //     <Flex>\n  //       <IconButton bg='brandpurple.100' size=\"sm\" icon={<EditIcon />} {...getEditButtonProps()} />\n  //     </Flex>\n  //   )\n  // }\n\n  const handleUpdateDeadline = async (value) => {\n    try {\n      await axios.post(baseURL + user.publicMetadata.type + '/updatetaskdeadline', {\n        taskuuid: task.uuid,\n        userId: user.id,\n        newdeadline: value\n      }).then(res => {\n        if (res.data.success) {\n          setDeadlineDate(value)\n        } else {\n          setDeadlineDate(task.deadline)\n          toast({\n            title: 'Uh Oh :(',\n            description: res.data.error,\n            status: 'error',\n            duration: 3000,\n            isClosable: true,\n          })\n        }\n      })\n    } catch (e) {\n      toast({\n        title: 'Uh Oh :(',\n        description: 'An error has occurred',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      })\n    }\n  }\n\n  return (\n\n    <>\n      {user.publicMetadata.type === 'freelancer'\n        ? <Box alignItems='center' onClick={onOpen} _hover={{ cursor: 'pointer', bg: 'brandpurple.100' }} rounded={5} pt={1} pl={5} pr={5} bg='blue.900' w={200} h={95} >\n          <Text textAlign='left' whiteSpace='nowrap' overflow='hidden' textOverflow='ellipsis' fontWeight='700' fontSize={20} color='white'>{task.title}</Text>\n          {task.deadline != null\n            ?\n            <>\n              <Text color={new Date(task.deadline) < new Date().setHours(0, 0, 0, 0) ? 'brandred.100' : 'white'}><Moment format=\"MMM DD, YYYY\">{task.deadline}</Moment></Text>\n            </>\n            : null}\n          <Text fontSize={20} color='gray.300'>{task.tasks.length} tasks</Text>\n          {/* </Flex> */}\n        </Box>\n        : <Box rounded={5} pt={1} pl={5} pr={5} bg='blue.900' w={200} h={95}>\n          <Text textAlign='left' whiteSpace='nowrap' overflow='hidden' textOverflow='ellipsis' fontWeight='700' fontSize={20} color='white'>{task.title}</Text>\n          {task.deadline != null\n            ?\n            <>\n              <Text color={new Date(task.deadline) < new Date().setHours(0, 0, 0, 0) ? 'brandred.100' : 'white'}><Moment format=\"MMM DD, YYYY\">{task.deadline}</Moment></Text>\n            </>\n            : null}\n          <Text fontSize={20} color='gray.300'>{task.tasks.length} tasks</Text>\n        </Box>}\n      <Modal size='md' isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay bg='whiteAlpha.300' />\n        <ModalContent bg='brandgray.900' >\n          <ModalHeader pr={45} color='white'>\n            {/* <Editable\n              defaultValue=\"Rasengan ⚡️\"\n              fontSize=\"lg\"\n              isPreviewFocusable={false}\n            >\n              <EditablePreview />\n              <Flex flexDir='row'>\n                <EditableInput w={300} variant='flushed' />\n                <EditableControls />\n              </Flex>\n            </Editable> */}\n            <form onSubmit={handleUpdateTitle}>\n              {/* <Center> */}\n              <Flex>\n                {/* <Text mt={3} fontWeight='700' color='white'>Update Title:</Text> */}\n                <Input ml={2} defaultValue={task.title} value={newTitle} onChange={e => setNewTitle(e.target.value)} placeholder='New Title' w={'80%'} color='white' variant='flushed' />\n                <Tooltip hasArrow placement='bottom' label=\"Update Task Title\" bg=\"gray.300\" color=\"black\">\n                  <Button _hover={{ color: 'brandgray.900', bg: 'gray.200' }} onClick={handleUpdateTitle} bg='brandpurple.100' size='sm' fonSize={20} ml={3}>Update</Button>\n                </Tooltip>\n                <Tooltip hasArrow placement='bottom' label=\"Delete Task\" bg=\"gray.300\" color=\"black\">\n                  <Button onClick={() => handleDeleteTask(task.uuid)} bg='brandred.100' size='sm' color='brandgray.100' ml={2}><Trash2 /></Button>\n                </Tooltip>\n\n              </Flex>\n              {/* </Center> */}\n            </form>\n            {/* {task.title}*/}\n          </ModalHeader>\n          <ModalCloseButton color='white' />\n          <ModalBody>\n            {/* <Lorem count={2} /> */}\n            <Flex color='black'>\n              <Text mr={3} fontWeight='700' color='white'>Deadline: </Text>\n              <DatePicker\n                onChange={handleUpdateDeadline}\n                value={deadlineDate}\n                clearIcon={<CloseIcon h={3} w={3} color='brandpurple.100' _hover={{ color: 'white', cursor: 'pointer' }} />}\n                calendarIcon={<CalendarIcon color='brandpurple.100' _hover={{ color: 'white', cursor: 'pointer' }} />}\n              />\n            </Flex>\n            <Text color='white' mt={5}>Tasks</Text>\n            <form onSubmit={handleAddMiniTask}>\n              <Flex mt={0}>\n                <Input color='white' w={'100%'} placeholder='Add mini task' value={newTask} onChange={(e) => setNewTask(e.target.value)} variant='flushed' />\n                <Button onClick={handleAddMiniTask} size='sm' bg='brandpurple.100' ml={3} fonSize={20}>Add</Button>\n              </Flex>\n            </form>\n            <Box mt={2} bg='blue.900' w='100%' color='white' p={5} pt={2}>\n              {task.tasks.map((miniTask, key) => (\n                <Flex mt={2} w='100%' key={key}>\n                  {/* <Text mt={2}>{miniTask.title}</Text> */}\n                  <Checkbox w='100%' onChange={() => handleMiniTaskUpdate(key)} colorScheme=\"green\" mt={2} defaultIsChecked={miniTask.completed}>\n                    <Flex >\n                      <Text color={miniTask.completed ? 'white' : 'brandred.100'} mr={10}>{miniTask.title}</Text>\n                      <IconButton right={0} pos='absolute' onClick={() => hanldeDeleteMiniTask(key)} w={5} h={7} _hover={{ color: 'brandred.100', bg: 'white' }} bg='brandred.100' ml={50} icon={<DeleteIcon />} />\n                    </Flex>\n                  </Checkbox>\n                </Flex>\n              ))}\n            </Box>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button bg=\"brandred.100\" mr={3} onClick={onClose}>\n              close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\nexport default TodoGrid\n\n","import '../../DatePicker.css'\nimport React, { forwardRef, useEffect, useState } from 'react'\n\nimport {\n  useParams,\n} from 'react-router-dom'\n\nimport {\n  Grid,\n  GridItem,\n  Flex,\n  Text,\n  Select,\n  CircularProgress,\n  Input,\n  Button,\n  Center,\n  useToast,\n  // Box,\n  IconButton,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n  Tooltip,\n  Icon\n} from '@chakra-ui/react'\n\nimport { RepeatIcon, CalendarIcon, CloseIcon } from '@chakra-ui/icons'\n\nimport Header from '../../Components/Header'\nimport Nav from '../../Components/Nav'\nimport TodoGrid from '../../Components/TodoGrid'\nimport ProBanner from '../../Components/ProBanner'\n\nimport axios from 'axios'\n\nimport { fetchProjects, currentProjectAtom, projectAtom, updateTasksSelector } from '../../utils/atom'\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { baseURL } from '../../utils/globalVar'\nimport { useUser } from '@clerk/clerk-react'\n\nimport DatePicker from 'react-date-picker';\n\n// import { useHistory } from 'react-router-dom'\nimport { Settings } from 'react-feather'\n\naxios.defaults.withCredentials = true\n\nconst Project = () => {\n  const user = useUser()\n  const [currentProject, setCurrentProject] = useRecoilState(currentProjectAtom);\n  const { id } = useParams()\n  const [task, setTask] = useState('')\n  const toast = useToast()\n  const project = useRecoilValue(projectAtom)\n  // eslint-disable-next-line\n  const [updateTask, setUpdateTasks] = useRecoilState(updateTasksSelector)\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n\n  useEffect(() => {\n    if (id !== 'default') {\n      setCurrentProject(id)\n    }\n  }, [id, setCurrentProject])\n\n  const handleChange = (event) => {\n    if (event.target.value !== '') {\n      setCurrentProject(event.target.value)\n      window.location.href = event.target.value\n    }\n  }\n\n  const handleAdd = async (e) => {\n    e.preventDefault()\n    if (task !== '') {\n      try {\n        await axios.post(baseURL + user.publicMetadata.type + '/addtask', {\n          userId: user.id,\n          projectuuid: project.uuid,\n          description: '',\n          title: task\n        }).then(res => {\n          if (res.data.success) {\n            let addedTask = res.data.task\n            setTask('')\n            setUpdateTasks({ addedTask })\n          } else {\n            toast({\n              title: 'Uh Oh :(',\n              description: res.data.error,\n              status: 'error',\n              duration: 3000,\n              isClosable: true,\n            })\n          }\n        })\n      } catch (e) {\n        toast({\n          title: 'Uh Oh :(',\n          description: 'An error has occurred',\n          status: 'error',\n          duration: 3000,\n          isClosable: true,\n        })\n\n      }\n      // setUpdateTasks({ item })\n    }\n  }\n\n\n\n  // const Status = () => {\n  //   return (\n  //     <>\n  //       <Box color='white' bg='brandgray.900' h={100} w={300}>\n  //         <Text>Items Completed: { }</Text>\n  //       </Box>\n  //     </>\n  //   )\n  // }\n  const hanldeDeleteProject = async () => {\n    try {\n      await axios.post(baseURL + user.publicMetadata.type + '/deleteproject', {\n        projectuuid: project.uuid,\n        userId: user.id\n      }).then(res => {\n        toast({\n          description: 'Project deleted',\n          status: 'success',\n          duration: 2000,\n          isClosable: true,\n        })\n        onClose()\n        setTimeout(() => { window.location.href = `/${user.publicMetadata.type}` }, 2000)\n      })\n    } catch (error) {\n      toast({\n        title: 'Uh Oh :(',\n        description: 'An error has occurred',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      })\n    }\n  }\n  return (\n    <>\n      <ProBanner />\n      <Grid\n        h=\"100vh\"\n        templateRows=\"repeat(1, 1fr)\"\n        templateColumns=\"repeat(18, 1fr)\"\n        gap={0}\n      >\n        <GridItem display={['none', 'none', 'none', 'flex', 'flex']} bg=\"brandgray.200\" rowSpan={2} colSpan={1}>\n          <React.Suspense fallback={null}>\n            <Nav taskActive={true} />\n          </React.Suspense>\n        </GridItem>\n        <GridItem ml='5%' mr='5%' overflow='auto' rowSpan={2} colSpan={[18, 18, 18, 17, 17]} bg='brandgray.100'>\n          <Header projectActive={true} />\n          {project\n            ? <>\n              <Flex mt='5%' flexDir='column' >\n                <Flex>\n                  <Text fontSize='40' fontWeight='700' color='white'>Activity</Text>\n                  <ProjectSettings project={project} />\n                  {project\n                    ? <>\n                      {project.creator.clerkid === user.id ? <Button ml={3} w={[75, 120]} fontSize={[10, 15]} onClick={onOpen} alignSelf='center' color='brandgray.100' bg='brandred.100' >Delete Project</Button> : null}\n                    </>\n                    : null}\n                  <RepeatIcon onClick={() => window.location.reload()} _hover={{ color: 'gray.200', cursor: 'pointer' }} ml={3} alignSelf='center' w={25} h={25} color='brandpurple.100' />\n                </Flex>\n                <Flex flexDir={['column', 'column', 'row']} mt='2%'>\n                  <Center>\n                    <Select borderWidth={2} onChange={handleChange} borderColor='brandpurple.100' color='white' w={200} placeholder='Select Project'>\n                      <React.Suspense fallback={null}>\n                        <ProjectOptions />\n                      </React.Suspense>\n                    </Select>\n                  </Center>\n                  <Center mt={[3, 0]}>\n                    <form onSubmit={handleAdd}>\n                      <Input value={task} onChange={(e) => setTask(e.target.value)} color='white' placeholder='New Task List' variant='flushed' ml={[0, 0, 100]} w={[200, 250, 300]} />\n                      <Button onClick={handleAdd} _hover={{ color: 'brandgray.100', bg: 'gray.200' }} color='white' bg='brandpurple.100' ml={5}>Add</Button>\n                    </form>\n                  </Center>\n                </Flex>\n                {currentProject === ''\n                  ? <Text mt='1%' color='brandred.100'>* Select a project</Text>\n                  : <>\n                    <Flex alignItems='center' flexDir='column' mb='5%' mt='1%'>\n                      <React.Suspense fallback={<CircularProgress isIndeterminate color=\"brandpurple.100\" />}>\n                        <TodoGrid />\n                      </React.Suspense>\n                    </Flex>\n                  </>\n                }\n              </Flex>\n            </> : <>\n              {id === 'default'\n                ?\n                <>\n                  <Flex mt='5%' flexDir='column' >\n                    <Flex>\n                      <Text fontSize='40' fontWeight='700' color='white'>Activity</Text>\n                    </Flex>\n                    <Flex flexDir={['column', 'column', 'row']} mt='2%'>\n                      <Center>\n                        <Select borderWidth={2} onChange={handleChange} borderColor='brandpurple.100' color='white' w={200} placeholder='Select Project'>\n                          <React.Suspense fallback={null}>\n                            <ProjectOptions />\n                          </React.Suspense>\n                        </Select>\n                      </Center>\n                    </Flex>\n                    {currentProject === ''\n                      ? <Text mt='1%' color='brandred.100'>* Select a project</Text>\n                      : null}\n                  </Flex>\n                </> :\n                <Center>\n                  <Text color='white' fontWeight='700' fontSize={30}>Project Not Found</Text>\n                </Center>}\n            </>}\n        </GridItem>\n      </Grid>\n      <Modal size='sm' isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay bg='whiteAlpha.300' />\n        <ModalContent bg='brandgray.900' >\n          <ModalHeader color='white'>\n            Are you sure?\n          </ModalHeader>\n          <ModalCloseButton color='white' />\n          <ModalBody>\n            <Text color='white'>This action is not reversible</Text>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button bg='brandpurple.100' mr={3} onClick={onClose}>\n              No\n            </Button>\n            <Button bg='brandred.100' mr={3} onClick={hanldeDeleteProject}>\n              Yes\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n\nconst ProjectSettings = ({ project }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const toast = useToast()\n  const [clientEmail, setClientEmail] = useState('')\n  const user = useUser()\n  const [newTitle, setNewTitle] = useState('')\n  const [deadlineDate, setDeadlineDate] = useState(project.deadline !== null ? new Date(project.deadline) : '');\n  const handleInviteClient = async (e) => {\n    e.preventDefault()\n    if (clientEmail !== '') {\n      try {\n        await axios.post(baseURL + window.Clerk.user.publicMetadata.type + '/inviteclient', {\n          userId: user.id,\n          email: clientEmail,\n          projectuuid: project.uuid\n        }).then(res => {\n          if (res.data.success) {\n            setClientEmail('')\n            toast({\n              // title: 'Uh Oh :(',\n              description: 'User invited',\n              status: 'success',\n              duration: 3000,\n              isClosable: true,\n            })\n          } else {\n            setClientEmail('')\n            toast({\n              title: 'Uh Oh :(',\n              description: res.data.error,\n              status: 'error',\n              duration: 3000,\n              isClosable: true,\n            })\n          }\n        })\n      } catch (e) {\n        toast({\n          title: 'Uh Oh :(',\n          description: 'An error has occurred',\n          status: 'error',\n          duration: 3000,\n          isClosable: true,\n        })\n      }\n    }\n  }\n\n  const handleUpdateTitle = async (e) => {\n    e.preventDefault()\n    if (newTitle !== '') {\n      try {\n        await axios.post(baseURL + user.publicMetadata.type + '/updateprojecttitle', {\n          projectuuid: project.uuid,\n          userId: user.id,\n          newtitle: newTitle\n        }).then(res => {\n          if (res.data.success) {\n            setNewTitle('')\n            window.location.reload()\n          } else {\n            setNewTitle('')\n            toast({\n              title: 'Uh Oh :(',\n              description: res.data.error,\n              status: 'error',\n              duration: 3000,\n              isClosable: true,\n            })\n          }\n        })\n      } catch (e) {\n        setNewTitle('')\n        toast({\n          title: 'Uh Oh :(',\n          description: 'An error has occurred',\n          status: 'error',\n          duration: 3000,\n          isClosable: true,\n        })\n      }\n    }\n  }\n  const handleUpdateDeadline = async (value) => {\n    try {\n      await axios.post(baseURL + user.publicMetadata.type + '/updateprojectdeadline', {\n        projectuuid: project.uuid,\n        userId: user.id,\n        newdeadline: value\n      }).then(res => {\n        if (res.data.success) {\n          setDeadlineDate(value)\n        } else {\n          setDeadlineDate(project.deadline)\n          toast({\n            title: 'Uh Oh :(',\n            description: res.data.error,\n            status: 'error',\n            duration: 3000,\n            isClosable: true,\n          })\n        }\n      })\n    } catch (e) {\n      toast({\n        title: 'Uh Oh :(',\n        description: 'An error has occurred',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      })\n    }\n  }\n  var start = new Date();\n  start.setHours(0, 0, 0, 0)\n  return (\n    <>\n      {project\n        ? <>\n          {project.creator.clerkid === user.id\n            ?\n          <>\n            <Tooltip hasArrow placement='bottom' label=\"Project Settings\" bg=\"gray.300\" color=\"black\">\n              {/* <Button onClick={onOpen} bg='none' color='brandpurple.100' alignSelf='center' ml={2}></Button> */}\n              {/* <Settings onClick={onOpen} color='brandpurple.100' alignSelf='center' ml={2} /> */}\n              <Icon w={25} h={25} _hover={{bg: 'none', color: 'gray.200', cursor: 'pointer'}} onClick={onOpen} bg='none' color='brandpurple.100' alignSelf='center' ml={3} as={Settings}/>\n            \n            </Tooltip>\n            </>: null}\n        </>\n        : null}\n      <Modal size='2xl' isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay bg='whiteAlpha.300' />\n        <ModalContent bg='brandgray.900' >\n          <ModalHeader color='white'>\n            Project Settings\n            \n          </ModalHeader>\n          <ModalCloseButton color='white' />\n          <ModalBody>\n            <Flex color='black'>\n              <Text mr={3} fontWeight='700' color='white'>Deadline: </Text>\n              <DatePicker\n                onChange={handleUpdateDeadline}\n                value={deadlineDate}\n                clearIcon={<CloseIcon h={3} w={3} color='brandpurple.100' _hover={{color: 'white', cursor: 'pointer'}}  />}\n                calendarIcon={<CalendarIcon color='brandpurple.100' _hover={{color: 'white', cursor: 'pointer'}} />}\n              />\n            </Flex>\n\n            {/* <Lorem count={2} /> */}\n            <form onSubmit={handleUpdateTitle}>\n              <Flex>\n                <Text mt={5} fontWeight='700' color='white'>Update Title</Text>\n                <Input ml={3} value={newTitle} onChange={e => setNewTitle(e.target.value)} placeholder='New Title' w={400} color='white' variant='flushed' />\n                <Button onClick={handleUpdateTitle} bg='brandpurple.100' ml={3}>Update</Button>\n              </Flex>\n            </form>\n            <form onSubmit={handleInviteClient}>\n              <Flex mt={5} w='100%' >\n                <Text mt={5} fontWeight='700' color='white'>Invite client</Text>\n                <Input ml={3} color='white' value={clientEmail} onChange={e => setClientEmail(e.target.value)} w={400} placeholder='Enter client email' variant='flushed' />\n                <Button onClick={handleInviteClient} bg='brandpurple.100' ml={3}>Invite</Button>\n              </Flex>\n            </form>\n            {/* {project.invitedusers.length > 1 \n            ?<> \n            <Text fontWeight='700' mt={5} color='white'>Pending Invites</Text>\n            {project.invitedusers.map((user, index) => (\n              <Text mt={2} color='white'>{index +1}. {user.email}</Text>\n            ))}\n            </>: null} */}\n            <Text fontWeight='700' mt={5} color='white'>Pending Invites</Text>\n            {project\n              ? <>\n                {project.invitedusers.map((user, index) => (\n                  <Text mt={2} color='white'>{user.email}</Text>\n                ))}\n                <Text mt={5} fontWeight='700' color='white'>Members</Text>\n                {project.freelancers.map((freelancer, index) => (\n                  <Text mt={2} color='white'>{freelancer.name}</Text>\n                ))}\n                {project.clients.map((client, index) => (\n                  <Text mt={2} color='white'>{client.name}</Text>\n                ))}\n              </> : null}\n          </ModalBody>\n\n          <ModalFooter>\n            <Button bg='brandred.100' mr={3} onClick={onClose}>\n              close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n\nconst ProjectOptions = () => {\n  const projects = useRecoilValue(fetchProjects);\n  const { id } = useParams()\n  const user = useUser()\n  useEffect(() => {\n    if (projects.length === 1 && id === 'default') {\n      window.location.href = `/${user.publicMetadata.type}/project/${projects[0].uuid}`\n    }\n  })\n  return (\n    <>\n      {projects.map((data, index) => {\n        if (data.uuid === id) {\n          return <option selected key={index} value={data.uuid}>{data.name}</option>\n        } else {\n          return <option key={index} value={data.uuid}>{data.name}</option>\n        }\n      })}\n    </>\n  )\n}\n\nexport default Project","import React, { useEffect } from 'react'\nimport { SignUp } from '@clerk/clerk-react'\n\nimport {\n  useToast\n} from '@chakra-ui/react'\n\nimport {useParams} from 'react-router-dom'\nimport axios from 'axios'\nimport { baseURL } from '../../utils/globalVar'\n\naxios.defaults.withCredentials = true\n\nconst InviteSignup = () => {\n  const {id, email} = useParams()\n  // const user = useUser()\n  const toast = useToast()\n  useEffect(() => {\n    const main = async () => {\n      await axios.post(baseURL + 'client/checkinvite', {projectuuid: id, email}).then(res => {\n        if (!res.data.success) {\n          toast({\n            title: 'Uh Oh :(',\n            description: res.data.error,\n            status: 'error',\n            duration: 3000,\n            isClosable: true,\n          })\n          setTimeout(() => {window.location.href='/'}, 3000)\n        }\n      })\n    }\n    main()\n  })\n  return (\n    <>\n      <SignUp afterSignUp={`/client/project/${id}/signup/${email}`} />\n    </>\n  )\n}\n\n\nexport default InviteSignup ","import React, { useEffect, useState } from 'react'\nimport { useUser } from '@clerk/clerk-react'\n\nimport {\n  Center,\n  Text,\n  useToast,\n  Box,\n  Flex,\n  Button\n} from '@chakra-ui/react'\n\nimport axios from 'axios'\nimport { useParams } from 'react-router-dom'\nimport { baseURL } from '../../utils/globalVar'\n\nimport Tilt from 'react-tilt'\n\naxios.defaults.withCredentials = true\n\nconst AcceptInviteSignedin = () => {\n  const { id, email } = useParams()\n  const toast = useToast()\n  const [project, setProject] = useState({})\n  const user = useUser()\n  useEffect(() => {\n    const main = async () => {\n      await axios.post(baseURL + 'client/checkinvite', { projectuuid: id, email }).then(res => {\n        if (!res.data.success) {\n          toast({\n            title: 'Uh Oh :(',\n            description: res.data.error,\n            status: 'error',\n            duration: 3000,\n            isClosable: true,\n          })\n          setTimeout(() => { window.location.href = '/' }, 3000)\n        } else {\n          setProject(res.data.project)\n        }\n      })\n    }\n    main()\n    // eslint-disable-next-line\n  }, [])\n\n  const handleDecision = async (decision) => {\n    try {\n      await axios.post(baseURL + 'client/decideinvite', {\n        projectuuid: project.uuid,\n        clientId: user.id,\n        email,\n        decision\n      }).then(res => {\n        if (res.data.success) {\n          if (decision) {\n            window.location.href=`/client/project/${project.uuid}`\n          }\n        } else if (res.data.error === 'Invalid access') {\n          toast({\n            title: 'Uh Oh :(',\n            description: res.data.error,\n            status: 'error',\n            duration: 3000,\n            isClosable: true,\n          })\n          setTimeout(() => { window.location.href = '/'}, 3000)\n        } else {\n          toast({\n            title: 'Uh Oh :(',\n            description: res.data.error,\n            status: 'error',\n            duration: 3000,\n            isClosable: true,\n          })\n        }\n      })\n    } catch (error) {\n      toast({\n        title: 'Uh Oh :(',\n        description: 'An error has occurred',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      })\n    }\n  }\n\n  return (\n    <>\n      <Center w='100%' h='100vh'>\n        <Tilt className=\"Tilt\" options={{ max: 20, axis: 'X' }}>\n          <Box boxShadow=\"md\" pr={5} pl={5} pt={3} rounded={10} w={[300, 325, 350]} h={280} bg='brandgray.900'>\n            <Text fontSize={25} textAlign='center' color='white'>You have been invited to <Text fontWeight='700'>{project.name}</Text></Text>\n            <Flex mt={65} justify='space-evenly'>\n              <Button onClick={() => handleDecision(false)} bg='brandred.100'>Decline</Button>\n              <Button onClick={() => handleDecision(true)} bg='brandgreen.100'>Accept</Button>\n            </Flex>\n          </Box>\n        </Tilt>\n      </Center>\n    </>\n  )\n}\n\nexport default AcceptInviteSignedin","import React, { useEffect } from 'react'\n\nimport { BrowserRouter as Router, useHistory, Switch, Route, useParams } from \"react-router-dom\";\nimport { ClerkProvider, SignedIn, SignedOut, useUser } from \"@clerk/clerk-react\";\n\nimport Welcome from './Pages/Welcome'\n\n//Freelancer\nimport {default as FreelancerDashboard} from './Pages/Freelancer/Dashboard'\nimport Signup from \"./Pages/Freelancer/Signup\";\nimport Signin from \"./Pages/Freelancer/Signin\";\nimport {default as FreelancerProject} from './Pages/Freelancer/Project'\nimport {default as FreelancerChat} from './Pages/Freelancer/Chat'\n\n//client\nimport {default as ClientDashboard} from './Pages/Client/Dashboard'\nimport {default as ClientProject} from './Pages/Client/Project'\nimport {default as ClientChat} from './Pages/Client/Chat'\n// import { AcceptInviteSignedin, AcceptInviteSignup } from './Pages/Client/AcceptInvite'\nimport InviteSignup from './Pages/Client/InviteSignup'\nimport AcceptInviteSignedin from './Pages/Client/AcceptInviteSignedin'\n\nimport { baseURL, frontendApi } from './utils/globalVar'\n// import axios from 'axios';\n\n// import { accountTypeSelector, accountTypeAtom } from './utils/atom'\n// import { useRecoilState } from 'recoil'\nimport axios from 'axios';\n\naxios.defaults.withCredentials = true\n\nexport const AccountType = () => {\n  const user = useUser()\n  useEffect(() => {\n    window.location.href = `/${user.publicMetadata.type}`\n  })\n  return null\n}\n\nexport const ClientSignup = () => {\n  const user = useUser()\n  const {id, email} = useParams()\n  useEffect(() => {\n    const main = async () => {\n      await axios.post(baseURL + 'client/createaccount', {\n        id: user.id\n      }).then(res => {\n        if (res.data.success || res.data.error === 'User exists') {\n          window.location.href = `/client/project/${id}/invite/${email}`\n        } else {\n          window.location.href = '/'\n        }\n      })\n    }\n    main()\n  })\n  return null\n}\n\nexport const FreelancerSignup = () => {\n  const user = useUser()\n  useEffect(() => {\n    const main = async () => {\n      await axios.post(baseURL + 'freelancer/createaccount', {\n        id: user.id\n      }).then(() => {\n        window.location.href = '/'\n      })\n    }\n    main()\n  })\n  return null\n}\n\nconst App = () => {\n\n\n  return (\n    <Router forceRefresh={false} >\n      <Switch>\n        {/* <ClerkProviderWithNavigate> */}\n          {/* <SignedIn>\n            \n            <Route exact path=\"/\" render={(props) => <AccountType {...props} />} />\n            \n            freelancers\n            <Route exact path=\"/freelancer\" render={(props) => <FreelancerDashboard {...props} />} />\n            <Route exact path='/freelancer/project/:id' render={(props) => <React.Suspense fallback={null}> <FreelancerProject {...props} /></React.Suspense>} />\n            <Route exact path=\"/freelancer/signup\" render={(props) => <FreelancerSignup {...props} />} />\n            <Route exact path=\"/freelancer/chat\" render={(props) => <FreelancerChat {...props} />} />\n            <Route exact path=\"/freelancer/chat/default\" render={(props) => <FreelancerChat {...props} />} />\n            clients\n            <Route exact path=\"/client\" render={(props) => <ClientDashboard {...props} />} />\n            <Route exact path='/client/project/:id' render={(props) => <React.Suspense fallback={null}> <ClientProject {...props} /></React.Suspense>} />\n\n            <Route exact path='/client/project/:id/invite/:email' render={(props) => <AcceptInviteSignedin {...props} />} />\n            <Route exact path=\"/client/project/:id/signup/:email\" render={(props) => <ClientSignup {...props} />} />\n            \n            <Route exact path=\"/client/chat/default\" render={(props) => <ClientChat {...props} />} />\n          </SignedIn>\n          <SignedOut>\n            <Route exact path='/client/project/:id/invite/:email' render={(props) => <InviteSignup {...props} />} />\n\n          </SignedOut> */}\n          <Route exact path=\"/signin\" render={(props) => <Signin {...props} />} />\n          <Route exact path=\"/signup\" render={(props) => <Signup {...props} />} />\n          <Route exact path=\"/\" render={(props) => <Welcome {...props} />} />\n        {/* </ClerkProviderWithNavigate> */}\n      </Switch>\n    </Router>\n  );\n}\n\nconst ClerkProviderWithNavigate = ({ children }) => {\n  const { push } = useHistory();\n  return (\n    <ClerkProvider\n      frontendApi={frontendApi}\n      // \"clerk.8ldah.hb3ja.lcl.dev\"\n      navigate={(to) => {\n        return push(to);\n      }}\n    >\n      {children}\n    </ClerkProvider>\n  );\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\"\n\nimport { RecoilRoot } from 'recoil'\nconst theme = extendTheme({\n  colors: {\n    brandgray: {\n      50: '#718093',\n      100: '#23262E',\n      200: '#292C34',\n      900: '#14171C'\n    },\n    brandpurple: {\n      100: '#8C7AE6'\n    },\n    brandred: {\n      50: '#FF7676',\n      100: '#FF4D4D'\n    },\n    brandgreen: {\n      50: '#83B76D',\n      100: '#6AB04C'\n    },\n    brandblue: {\n      50: '#94C6CB',\n      100: '#57A2A9'\n    }\n  },\n  styles: {\n    global: {\n      body: {\n        bg: \"#23262E\",\n      },\n    },\n  },\n})\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <RecoilRoot>\n        <App />\n      </RecoilRoot>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}